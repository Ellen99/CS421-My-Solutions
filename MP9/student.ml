type token =
  | INT of (int)
  | FLOAT of (float)
  | STRING of (string)
  | IDENT of (string)
  | TRUE
  | FALSE
  | NEG
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | DPLUS
  | DMINUS
  | DTIMES
  | DDIV
  | MOD
  | EXP
  | CARAT
  | LT
  | GT
  | LEQ
  | GEQ
  | EQUALS
  | NEQ
  | PIPE
  | ARROW
  | SEMI
  | DSEMI
  | DCOLON
  | AT
  | NIL
  | LET
  | REC
  | AND
  | IN
  | IF
  | THEN
  | ELSE
  | FUN
  | RAISE
  | TRY
  | WITH
  | NOT
  | LOGICALAND
  | LOGICALOR
  | LBRAC
  | RBRAC
  | LPAREN
  | RPAREN
  | COMMA
  | UNDERSCORE
  | UNIT
  | HEAD
  | TAIL
  | PRINT
  | FST
  | SND
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "student.mly"
  open Common

(* You may want to add extra code here *)

# 69 "student.ml"
let yytransl_const = [|
  261 (* TRUE *);
  262 (* FALSE *);
  263 (* NEG *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* TIMES *);
  267 (* DIV *);
  268 (* DPLUS *);
  269 (* DMINUS *);
  270 (* DTIMES *);
  271 (* DDIV *);
  272 (* MOD *);
  273 (* EXP *);
  274 (* CARAT *);
  275 (* LT *);
  276 (* GT *);
  277 (* LEQ *);
  278 (* GEQ *);
  279 (* EQUALS *);
  280 (* NEQ *);
  281 (* PIPE *);
  282 (* ARROW *);
  283 (* SEMI *);
  284 (* DSEMI *);
  285 (* DCOLON *);
  286 (* AT *);
  287 (* NIL *);
  288 (* LET *);
  289 (* REC *);
  290 (* AND *);
  291 (* IN *);
  292 (* IF *);
  293 (* THEN *);
  294 (* ELSE *);
  295 (* FUN *);
  296 (* RAISE *);
  297 (* TRY *);
  298 (* WITH *);
  299 (* NOT *);
  300 (* LOGICALAND *);
  301 (* LOGICALOR *);
  302 (* LBRAC *);
  303 (* RBRAC *);
  304 (* LPAREN *);
  305 (* RPAREN *);
  306 (* COMMA *);
  307 (* UNDERSCORE *);
  308 (* UNIT *);
  309 (* HEAD *);
  310 (* TAIL *);
  311 (* PRINT *);
  312 (* FST *);
  313 (* SND *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* STRING *);
  260 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\003\000\003\000\005\000\005\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\009\000\
\009\000\011\000\011\000\013\000\013\000\016\000\016\000\018\000\
\018\000\020\000\020\000\020\000\022\000\022\000\021\000\021\000\
\026\000\026\000\019\000\019\000\019\000\019\000\019\000\019\000\
\027\000\027\000\028\000\029\000\031\000\032\000\032\000\033\000\
\033\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\035\000\035\000\036\000\036\000\037\000\037\000\038\000\038\000\
\039\000\039\000\041\000\041\000\041\000\043\000\043\000\042\000\
\042\000\044\000\044\000\040\000\040\000\040\000\040\000\040\000\
\004\000\004\000\006\000\006\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\045\000\045\000\010\000\010\000\014\000\
\014\000\046\000\046\000\017\000\017\000\017\000\047\000\047\000\
\023\000\023\000\025\000\025\000\025\000\025\000\025\000\049\000\
\049\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\030\000\030\000\024\000\024\000\024\000\024\000\024\000\
\024\000\012\000\012\000\012\000\012\000\012\000\015\000\015\000\
\015\000\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\005\000\007\000\001\000\003\000\001\000\003\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\003\000\001\000\001\000\
\001\000\001\000\001\000\002\000\003\000\002\000\001\000\002\000\
\001\000\001\000\004\000\006\000\008\000\006\000\004\000\002\000\
\001\000\003\000\003\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\003\000\001\000\
\001\000\001\000\001\000\001\000\002\000\003\000\002\000\001\000\
\002\000\001\000\001\000\006\000\006\000\008\000\004\000\002\000\
\003\000\001\000\003\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\001\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\001\000\001\000\002\000\003\000\002\000\
\001\000\002\000\001\000\003\000\005\000\003\000\002\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\117\000\118\000\119\000\114\000\115\000\116\000\
\129\000\121\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\120\000\126\000\127\000\128\000\124\000\125\000\140\000\
\000\000\004\000\000\000\006\000\000\000\008\000\000\000\015\000\
\000\000\017\000\019\000\000\000\021\000\000\000\023\000\024\000\
\025\000\026\000\027\000\000\000\000\000\000\000\091\000\097\000\
\101\000\107\000\000\000\000\000\000\000\000\000\000\000\104\000\
\030\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\130\000\131\000\
\132\000\133\000\134\000\000\000\000\000\135\000\136\000\137\000\
\138\000\139\000\000\000\000\000\034\000\028\000\000\000\032\000\
\102\000\000\000\040\000\000\000\111\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\110\000\108\000\000\000\
\005\000\000\000\007\000\000\000\009\000\085\000\010\000\086\000\
\011\000\087\000\012\000\088\000\013\000\089\000\014\000\090\000\
\016\000\092\000\018\000\000\000\020\000\096\000\022\000\098\000\
\103\000\029\000\000\000\000\000\000\000\000\000\000\000\039\000\
\123\000\122\000\035\000\041\000\000\000\000\000\113\000\000\000\
\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\109\000\036\000\000\000\000\000\038\000\042\000\000\000\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\045\000\047\000\049\000\
\056\000\058\000\060\000\062\000\064\000\065\000\066\000\067\000\
\068\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\
\069\000\073\000\000\000\000\000\080\000\037\000\000\000\000\000\
\000\000\000\000\000\000\046\000\000\000\048\000\050\000\051\000\
\052\000\053\000\054\000\055\000\057\000\000\000\059\000\061\000\
\063\000\070\000\000\000\000\000\000\000\079\000\000\000\000\000\
\000\000\077\000\000\000\076\000\000\000\078\000"

let yydgoto = "\002\000\
\024\000\059\000\026\000\027\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\077\000\035\000\036\000\083\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\088\000\139\000\140\000\141\000\142\000\173\000\174\000\
\175\000\176\000\177\000\178\000\179\000\180\000\181\000\182\000\
\183\000\184\000\185\000\210\000\047\000\048\000\049\000\050\000\
\060\000"

let yysindex = "\033\000\
\145\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\255\202\001\039\255\202\001\202\001\202\001\
\202\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\255\000\000\028\255\000\000\033\255\000\000\105\255\000\000\
\016\000\000\000\000\000\038\255\000\000\062\255\000\000\000\000\
\000\000\000\000\000\000\202\001\003\002\000\000\000\000\000\000\
\000\000\000\000\057\255\077\255\017\255\048\255\061\255\000\000\
\000\000\046\255\063\255\042\255\230\254\000\000\202\001\202\001\
\202\001\202\001\202\001\202\001\202\001\202\001\000\000\000\000\
\000\000\000\000\000\000\202\001\202\001\000\000\000\000\000\000\
\000\000\000\000\202\001\202\001\000\000\000\000\000\000\000\000\
\000\000\202\001\000\000\106\000\000\000\202\001\095\255\078\255\
\096\255\202\001\202\001\006\255\202\001\000\000\000\000\202\001\
\000\000\033\255\000\000\105\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\255\000\000\000\000\000\000\000\000\
\000\000\000\000\007\255\079\255\202\001\101\255\070\255\000\000\
\000\000\000\000\000\000\000\000\086\255\088\255\000\000\066\255\
\000\000\202\001\202\001\081\255\089\255\202\001\006\255\060\002\
\000\000\000\000\010\255\202\001\000\000\000\000\018\255\202\001\
\114\255\117\002\000\000\075\255\087\255\062\000\118\002\038\255\
\104\255\060\002\174\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\202\001\108\255\127\255\149\255\137\255\150\255\
\231\002\000\000\060\002\060\002\060\002\060\002\060\002\060\002\
\060\002\060\002\060\002\060\002\060\002\060\002\000\000\000\000\
\000\000\000\000\117\002\032\003\000\000\000\000\202\001\171\255\
\202\001\060\002\087\255\000\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\255\000\000\000\000\
\000\000\000\000\142\255\159\255\145\255\000\000\060\002\202\001\
\060\002\000\000\169\255\000\000\060\002\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\161\255\000\000\252\254\000\000\
\252\255\000\000\000\000\008\002\000\000\207\001\000\000\000\000\
\000\000\000\000\000\000\150\001\000\000\031\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\160\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\088\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\164\255\000\000\002\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\161\255\252\254\252\255\008\002\
\207\001\150\001\000\000\173\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\230\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\164\255\000\000\002\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\002\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\000\000\124\255\194\255\195\255\197\255\196\255\
\219\255\184\000\000\000\044\000\182\255\131\000\098\255\191\255\
\248\255\250\255\030\000\000\000\000\000\224\255\121\255\107\000\
\050\000\000\000\064\000\000\000\000\000\000\000\134\255\000\000\
\018\000\022\000\226\255\000\000\015\000\106\255\000\000\122\255\
\103\255\000\000\052\000\000\000\159\000\198\255\225\255\000\000\
\129\000"

let yytablesize = 1113
let yytable = "\025\000\
\105\000\106\000\123\000\108\000\107\000\056\000\137\000\057\000\
\194\000\205\000\054\000\086\000\089\000\058\000\051\000\061\000\
\170\000\125\000\127\000\164\000\096\000\189\000\103\000\104\000\
\126\000\128\000\170\000\109\000\111\000\113\000\115\000\117\000\
\119\000\001\000\145\000\208\000\213\000\186\000\121\000\084\000\
\084\000\146\000\055\000\052\000\187\000\083\000\083\000\078\000\
\079\000\097\000\190\000\080\000\081\000\082\000\232\000\233\000\
\138\000\234\000\062\000\170\000\170\000\170\000\170\000\170\000\
\170\000\170\000\170\000\170\000\170\000\170\000\170\000\205\000\
\063\000\085\000\091\000\170\000\064\000\213\000\084\000\094\000\
\095\000\129\000\170\000\130\000\098\000\164\000\099\000\100\000\
\102\000\101\000\165\000\166\000\131\000\087\000\093\000\238\000\
\135\000\136\000\132\000\134\000\133\000\147\000\144\000\170\000\
\149\000\170\000\164\000\150\000\164\000\170\000\151\000\156\000\
\164\000\152\000\153\000\146\000\242\000\192\000\244\000\195\000\
\206\000\091\000\246\000\065\000\066\000\067\000\068\000\069\000\
\070\000\123\000\196\000\148\000\105\000\219\000\166\000\221\000\
\107\000\086\000\089\000\125\000\127\000\093\000\187\000\169\000\
\154\000\155\000\126\000\128\000\157\000\215\000\163\000\092\000\
\216\000\056\000\188\000\057\000\165\000\166\000\191\000\109\000\
\111\000\113\000\115\000\117\000\119\000\121\000\223\000\224\000\
\225\000\226\000\227\000\228\000\229\000\217\000\236\000\218\000\
\239\000\165\000\166\000\165\000\166\000\240\000\241\000\165\000\
\166\000\214\000\169\000\169\000\169\000\169\000\169\000\169\000\
\169\000\169\000\169\000\169\000\169\000\169\000\092\000\085\000\
\091\000\172\000\129\000\245\000\130\000\082\000\112\000\124\000\
\081\000\169\000\204\000\172\000\220\000\235\000\158\000\237\000\
\136\000\222\000\231\000\207\000\093\000\209\000\091\000\110\000\
\112\000\114\000\116\000\118\000\120\000\143\000\169\000\000\000\
\169\000\000\000\122\000\000\000\169\000\154\000\243\000\157\000\
\000\000\091\000\093\000\214\000\172\000\172\000\172\000\172\000\
\172\000\172\000\172\000\172\000\172\000\172\000\172\000\172\000\
\000\000\000\000\171\000\000\000\172\000\093\000\000\000\000\000\
\000\000\000\000\000\000\172\000\193\000\000\000\093\000\093\000\
\093\000\093\000\093\000\093\000\171\000\212\000\000\000\071\000\
\072\000\000\000\168\000\073\000\074\000\000\000\000\000\000\000\
\172\000\075\000\172\000\000\000\000\000\000\000\172\000\093\000\
\093\000\000\000\000\000\092\000\076\000\171\000\171\000\171\000\
\171\000\171\000\171\000\171\000\171\000\171\000\171\000\171\000\
\171\000\000\000\000\000\000\000\000\000\193\000\212\000\000\000\
\000\000\000\000\000\000\000\000\171\000\168\000\168\000\168\000\
\168\000\168\000\168\000\168\000\168\000\168\000\230\000\167\000\
\197\000\198\000\199\000\200\000\201\000\202\000\000\000\000\000\
\000\000\171\000\000\000\171\000\168\000\000\000\000\000\171\000\
\000\000\000\000\000\000\110\000\112\000\114\000\116\000\118\000\
\120\000\122\000\003\000\004\000\005\000\006\000\007\000\008\000\
\009\000\168\000\000\000\168\000\000\000\000\000\000\000\168\000\
\000\000\000\000\167\000\167\000\167\000\167\000\167\000\167\000\
\167\000\167\000\167\000\000\000\000\000\000\000\000\000\000\000\
\010\000\053\000\000\000\000\000\000\000\012\000\000\000\000\000\
\013\000\167\000\015\000\000\000\000\000\000\000\000\000\016\000\
\000\000\017\000\000\000\000\000\000\000\018\000\019\000\020\000\
\021\000\022\000\023\000\000\000\000\000\000\000\167\000\000\000\
\167\000\000\000\000\000\000\000\167\000\105\000\105\000\105\000\
\105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
\105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
\105\000\105\000\105\000\105\000\105\000\072\000\000\000\031\000\
\031\000\105\000\000\000\105\000\105\000\000\000\000\000\031\000\
\105\000\031\000\031\000\105\000\105\000\105\000\031\000\000\000\
\105\000\105\000\105\000\031\000\105\000\031\000\031\000\000\000\
\105\000\105\000\105\000\105\000\105\000\105\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\074\000\000\000\
\033\000\033\000\106\000\000\000\106\000\106\000\000\000\000\000\
\033\000\106\000\033\000\033\000\106\000\106\000\106\000\033\000\
\000\000\106\000\106\000\106\000\033\000\106\000\033\000\033\000\
\000\000\106\000\106\000\106\000\106\000\106\000\106\000\105\000\
\105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
\105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
\105\000\105\000\105\000\105\000\105\000\105\000\105\000\000\000\
\000\000\031\000\031\000\105\000\000\000\105\000\105\000\000\000\
\000\000\031\000\105\000\031\000\031\000\105\000\105\000\105\000\
\031\000\000\000\105\000\105\000\105\000\031\000\105\000\031\000\
\031\000\000\000\105\000\105\000\105\000\105\000\105\000\105\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\000\000\000\000\033\000\033\000\106\000\000\000\106\000\106\000\
\000\000\000\000\033\000\106\000\033\000\033\000\106\000\106\000\
\106\000\033\000\000\000\106\000\106\000\106\000\033\000\106\000\
\033\000\033\000\000\000\106\000\106\000\106\000\106\000\106\000\
\106\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\000\000\000\000\000\000\000\000\000\000\100\000\100\000\100\000\
\100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
\100\000\100\000\100\000\100\000\100\000\100\000\000\000\010\000\
\011\000\000\000\100\000\000\000\012\000\000\000\000\000\013\000\
\014\000\015\000\000\000\000\000\000\000\000\000\016\000\000\000\
\017\000\100\000\100\000\000\000\018\000\019\000\020\000\021\000\
\022\000\023\000\003\000\004\000\005\000\006\000\007\000\008\000\
\009\000\000\000\000\000\000\000\000\000\000\000\099\000\099\000\
\099\000\099\000\099\000\099\000\099\000\099\000\099\000\000\000\
\099\000\099\000\099\000\099\000\099\000\099\000\099\000\000\000\
\010\000\053\000\000\000\099\000\000\000\012\000\000\000\000\000\
\013\000\014\000\015\000\000\000\000\000\000\000\000\000\016\000\
\000\000\017\000\099\000\099\000\000\000\018\000\019\000\020\000\
\021\000\022\000\023\000\003\000\004\000\005\000\006\000\007\000\
\008\000\009\000\000\000\000\000\000\000\000\000\000\000\095\000\
\095\000\000\000\000\000\095\000\095\000\000\000\000\000\000\000\
\000\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\000\000\010\000\053\000\000\000\095\000\000\000\012\000\000\000\
\000\000\013\000\090\000\015\000\000\000\000\000\000\000\000\000\
\016\000\000\000\017\000\095\000\095\000\000\000\018\000\019\000\
\020\000\021\000\022\000\023\000\003\000\004\000\005\000\006\000\
\007\000\008\000\009\000\000\000\000\000\000\000\000\000\000\000\
\094\000\094\000\000\000\000\000\094\000\094\000\000\000\000\000\
\000\000\000\000\094\000\094\000\094\000\094\000\094\000\094\000\
\094\000\000\000\010\000\159\000\000\000\094\000\000\000\160\000\
\000\000\000\000\161\000\162\000\015\000\000\000\000\000\000\000\
\000\000\016\000\000\000\017\000\094\000\094\000\000\000\018\000\
\019\000\020\000\021\000\022\000\023\000\003\000\004\000\005\000\
\006\000\007\000\008\000\009\000\000\000\071\000\072\000\000\000\
\000\000\073\000\074\000\000\000\000\000\000\000\000\000\075\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\203\000\010\000\053\000\000\000\000\000\000\000\
\012\000\000\000\000\000\013\000\162\000\015\000\000\000\000\000\
\000\000\000\000\016\000\000\000\017\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\023\000\003\000\004\000\
\005\000\006\000\007\000\008\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\159\000\000\000\000\000\
\000\000\160\000\000\000\000\000\161\000\211\000\015\000\000\000\
\000\000\000\000\000\000\016\000\000\000\017\000\000\000\000\000\
\000\000\018\000\019\000\020\000\021\000\022\000\023\000\003\000\
\004\000\005\000\006\000\007\000\008\000\009\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\053\000\000\000\
\000\000\000\000\012\000\000\000\000\000\013\000\211\000\015\000\
\000\000\000\000\000\000\000\000\016\000\000\000\017\000\000\000\
\000\000\000\000\018\000\019\000\020\000\021\000\022\000\023\000\
\003\000\004\000\005\000\006\000\007\000\008\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\000\159\000\
\000\000\000\000\000\000\160\000\000\000\000\000\161\000\000\000\
\015\000\000\000\000\000\000\000\000\000\016\000\000\000\017\000\
\000\000\000\000\000\000\018\000\019\000\020\000\021\000\022\000\
\023\000"

let yycheck = "\001\000\
\063\000\063\000\077\000\064\000\064\000\014\000\001\001\014\000\
\162\000\168\000\012\000\044\000\044\000\015\000\004\001\017\000\
\152\000\083\000\084\000\152\000\004\001\004\001\049\001\050\001\
\083\000\084\000\162\000\065\000\066\000\067\000\068\000\069\000\
\070\000\001\000\028\001\170\000\171\000\028\001\076\000\044\001\
\045\001\035\001\004\001\033\001\035\001\044\001\045\001\010\001\
\011\001\033\001\033\001\014\001\015\001\016\001\205\000\206\000\
\051\001\211\000\028\001\195\000\196\000\197\000\198\000\199\000\
\200\000\201\000\202\000\203\000\204\000\205\000\206\000\230\000\
\045\001\044\000\045\000\211\000\044\001\212\000\017\001\023\001\
\004\001\090\000\218\000\090\000\037\001\218\000\026\001\042\001\
\047\001\027\001\152\000\152\000\094\000\044\000\045\000\218\000\
\098\000\099\000\004\001\004\001\023\001\023\001\104\000\239\000\
\004\001\241\000\239\000\038\001\241\000\245\000\025\001\023\001\
\245\000\026\001\049\001\035\001\239\000\004\001\241\000\045\001\
\017\001\092\000\245\000\019\001\020\001\021\001\022\001\023\001\
\024\001\204\000\044\001\133\000\195\000\195\000\195\000\196\000\
\196\000\170\000\170\000\205\000\206\000\092\000\035\001\152\000\
\146\000\147\000\205\000\206\000\150\000\023\001\152\000\045\000\
\004\001\162\000\156\000\162\000\218\000\218\000\160\000\197\000\
\198\000\199\000\200\000\201\000\202\000\203\000\197\000\198\000\
\199\000\200\000\201\000\202\000\203\000\037\001\004\001\026\001\
\035\001\239\000\239\000\241\000\241\000\023\001\038\001\245\000\
\245\000\187\000\195\000\196\000\197\000\198\000\199\000\200\000\
\201\000\202\000\203\000\204\000\205\000\206\000\092\000\170\000\
\171\000\152\000\211\000\035\001\211\000\045\001\047\001\077\000\
\045\001\218\000\167\000\162\000\195\000\215\000\151\000\217\000\
\218\000\196\000\204\000\170\000\171\000\170\000\193\000\065\000\
\066\000\067\000\068\000\069\000\070\000\101\000\239\000\255\255\
\241\000\255\255\076\000\255\255\245\000\239\000\240\000\241\000\
\255\255\212\000\193\000\245\000\195\000\196\000\197\000\198\000\
\199\000\200\000\201\000\202\000\203\000\204\000\205\000\206\000\
\255\255\255\255\152\000\255\255\211\000\212\000\255\255\255\255\
\255\255\255\255\255\255\218\000\162\000\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\170\000\171\000\255\255\008\001\
\009\001\255\255\152\000\012\001\013\001\255\255\255\255\255\255\
\239\000\018\001\241\000\255\255\255\255\255\255\245\000\044\001\
\045\001\255\255\255\255\193\000\029\001\195\000\196\000\197\000\
\198\000\199\000\200\000\201\000\202\000\203\000\204\000\205\000\
\206\000\255\255\255\255\255\255\255\255\211\000\212\000\255\255\
\255\255\255\255\255\255\255\255\218\000\195\000\196\000\197\000\
\198\000\199\000\200\000\201\000\202\000\203\000\204\000\152\000\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\255\255\
\255\255\239\000\255\255\241\000\218\000\255\255\255\255\245\000\
\255\255\255\255\255\255\197\000\198\000\199\000\200\000\201\000\
\202\000\203\000\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\239\000\255\255\241\000\255\255\255\255\255\255\245\000\
\255\255\255\255\195\000\196\000\197\000\198\000\199\000\200\000\
\201\000\202\000\203\000\255\255\255\255\255\255\255\255\255\255\
\031\001\032\001\255\255\255\255\255\255\036\001\255\255\255\255\
\039\001\218\000\041\001\255\255\255\255\255\255\255\255\046\001\
\255\255\048\001\255\255\255\255\255\255\052\001\053\001\054\001\
\055\001\056\001\057\001\255\255\255\255\255\255\239\000\255\255\
\241\000\255\255\255\255\255\255\245\000\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\027\001\
\028\001\029\001\255\255\031\001\032\001\255\255\255\255\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\255\255\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\052\001\053\001\054\001\055\001\056\001\057\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\027\001\028\001\029\001\255\255\031\001\032\001\255\255\255\255\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\255\255\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\052\001\053\001\054\001\055\001\056\001\057\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\255\255\027\001\028\001\029\001\255\255\031\001\032\001\255\255\
\255\255\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\255\255\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\052\001\053\001\054\001\055\001\056\001\057\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\255\255\027\001\028\001\029\001\255\255\031\001\032\001\
\255\255\255\255\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\255\255\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\052\001\053\001\054\001\055\001\056\001\
\057\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\255\255\255\255\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\031\001\
\032\001\255\255\029\001\255\255\036\001\255\255\255\255\039\001\
\040\001\041\001\255\255\255\255\255\255\255\255\046\001\255\255\
\048\001\044\001\045\001\255\255\052\001\053\001\054\001\055\001\
\056\001\057\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\255\255\255\255\255\255\255\255\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\255\255\
\031\001\032\001\255\255\029\001\255\255\036\001\255\255\255\255\
\039\001\040\001\041\001\255\255\255\255\255\255\255\255\046\001\
\255\255\048\001\044\001\045\001\255\255\052\001\053\001\054\001\
\055\001\056\001\057\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\255\255\255\255\255\255\008\001\
\009\001\255\255\255\255\012\001\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\031\001\032\001\255\255\029\001\255\255\036\001\255\255\
\255\255\039\001\040\001\041\001\255\255\255\255\255\255\255\255\
\046\001\255\255\048\001\044\001\045\001\255\255\052\001\053\001\
\054\001\055\001\056\001\057\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\255\255\255\255\255\255\255\255\255\255\
\008\001\009\001\255\255\255\255\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\031\001\032\001\255\255\029\001\255\255\036\001\
\255\255\255\255\039\001\040\001\041\001\255\255\255\255\255\255\
\255\255\046\001\255\255\048\001\044\001\045\001\255\255\052\001\
\053\001\054\001\055\001\056\001\057\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\255\255\008\001\009\001\255\255\
\255\255\012\001\013\001\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\029\001\031\001\032\001\255\255\255\255\255\255\
\036\001\255\255\255\255\039\001\040\001\041\001\255\255\255\255\
\255\255\255\255\046\001\255\255\048\001\255\255\255\255\255\255\
\052\001\053\001\054\001\055\001\056\001\057\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\255\255\255\255\
\255\255\036\001\255\255\255\255\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\046\001\255\255\048\001\255\255\255\255\
\255\255\052\001\053\001\054\001\055\001\056\001\057\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001\255\255\
\255\255\255\255\036\001\255\255\255\255\039\001\040\001\041\001\
\255\255\255\255\255\255\255\255\046\001\255\255\048\001\255\255\
\255\255\255\255\052\001\053\001\054\001\055\001\056\001\057\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\031\001\032\001\
\255\255\255\255\255\255\036\001\255\255\255\255\039\001\255\255\
\041\001\255\255\255\255\255\255\255\255\046\001\255\255\048\001\
\255\255\255\255\255\255\052\001\053\001\054\001\055\001\056\001\
\057\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  NEG\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  DPLUS\000\
  DMINUS\000\
  DTIMES\000\
  DDIV\000\
  MOD\000\
  EXP\000\
  CARAT\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  EQUALS\000\
  NEQ\000\
  PIPE\000\
  ARROW\000\
  SEMI\000\
  DSEMI\000\
  DCOLON\000\
  AT\000\
  NIL\000\
  LET\000\
  REC\000\
  AND\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FUN\000\
  RAISE\000\
  TRY\000\
  WITH\000\
  NOT\000\
  LOGICALAND\000\
  LOGICALOR\000\
  LBRAC\000\
  RBRAC\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  UNDERSCORE\000\
  UNIT\000\
  HEAD\000\
  TAIL\000\
  PRINT\000\
  FST\000\
  SND\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  STRING\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 28 "student.mly"
                                ( (Anon ( _1)) )
# 647 "student.ml"
               : Common.dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 29 "student.mly"
                                                  ( (Let (_2,_4)) )
# 655 "student.ml"
               : Common.dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 30 "student.mly"
                                                   ( (LetRec (_3, _4, _6)) )
# 664 "student.ml"
               : Common.dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'op_or_and_exp) in
    Obj.repr(
# 37 "student.mly"
                 (_1)
# 671 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_or_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_expression) in
    Obj.repr(
# 40 "student.mly"
                                         (IfExp (_1, ConstExp ( BoolConst true), _3))
# 679 "student.ml"
               : 'op_or_and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expression) in
    Obj.repr(
# 41 "student.mly"
                   ( _1 )
# 686 "student.ml"
               : 'op_or_and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_and_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'comparing_expressions) in
    Obj.repr(
# 44 "student.mly"
                                                  (IfExp (_1, _3, ConstExp (BoolConst false)))
# 694 "student.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comparing_expressions) in
    Obj.repr(
# 45 "student.mly"
                          ( _1 )
# 701 "student.ml"
               : 'and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_or_upper_exp) in
    Obj.repr(
# 48 "student.mly"
                                            ( BinOpAppExp(GreaterOp, _3, _1) )
# 709 "student.ml"
               : 'comparing_expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_or_upper_exp) in
    Obj.repr(
# 49 "student.mly"
                                            ( BinOpAppExp(GreaterOp, _1, _3) )
# 717 "student.ml"
               : 'comparing_expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_or_upper_exp) in
    Obj.repr(
# 50 "student.mly"
                                             ( IfExp( BinOpAppExp(GreaterOp, _3, _1), ConstExp (BoolConst true), BinOpAppExp(EqOp, _1, _3)) )
# 725 "student.ml"
               : 'comparing_expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_or_upper_exp) in
    Obj.repr(
# 51 "student.mly"
                                             ( IfExp( BinOpAppExp(GreaterOp, _1, _3), ConstExp (BoolConst true), BinOpAppExp(EqOp, _1, _3)) )
# 733 "student.ml"
               : 'comparing_expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_or_upper_exp) in
    Obj.repr(
# 52 "student.mly"
                                                ( BinOpAppExp(EqOp, _1, _3) )
# 741 "student.ml"
               : 'comparing_expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_or_upper_exp) in
    Obj.repr(
# 53 "student.mly"
                                             ( IfExp( BinOpAppExp(EqOp, _1, _3), ConstExp (BoolConst false),ConstExp (BoolConst false)) )
# 749 "student.ml"
               : 'comparing_expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cons_or_upper_exp) in
    Obj.repr(
# 54 "student.mly"
                      (_1)
# 756 "student.ml"
               : 'comparing_expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'same_level_adds_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_or_upper_exp) in
    Obj.repr(
# 57 "student.mly"
                                                 ( BinOpAppExp(ConsOp, _1, _3))
# 764 "student.ml"
               : 'cons_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'adds_or_upper_exp) in
    Obj.repr(
# 58 "student.mly"
                      (_1)
# 771 "student.ml"
               : 'cons_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'same_level_adds_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'plus_minus_dplus_dminus_concat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mults_or_upper_exp) in
    Obj.repr(
# 61 "student.mly"
                                                                          (BinOpAppExp(_2, _1, _3))
# 780 "student.ml"
               : 'adds_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mults_or_upper_exp) in
    Obj.repr(
# 62 "student.mly"
                       (_1)
# 787 "student.ml"
               : 'adds_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'same_level_mults_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'times_div_dtimes_ddiv_mod) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expo_or_upper_exp) in
    Obj.repr(
# 65 "student.mly"
                                                                    (BinOpAppExp(_2, _1, _3))
# 796 "student.ml"
               : 'mults_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expo_or_upper_exp) in
    Obj.repr(
# 66 "student.mly"
                     (_1)
# 803 "student.ml"
               : 'mults_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_application_raise_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expo_or_upper_exp) in
    Obj.repr(
# 69 "student.mly"
                                                    ( BinOpAppExp (ExpoOp, _1,_3))
# 811 "student.ml"
               : 'expo_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_operator_exp) in
    Obj.repr(
# 70 "student.mly"
                   (_1)
# 818 "student.ml"
               : 'expo_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'try_let_if_fun_monop_exp) in
    Obj.repr(
# 73 "student.mly"
                             (_1)
# 825 "student.ml"
               : 'no_operator_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'application_raise_exp) in
    Obj.repr(
# 74 "student.mly"
                          (_1)
# 832 "student.ml"
               : 'no_operator_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'application_exp) in
    Obj.repr(
# 77 "student.mly"
                   (_1)
# 839 "student.ml"
               : 'application_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'monop_or_raise) in
    Obj.repr(
# 78 "student.mly"
                  (_1)
# 846 "student.ml"
               : 'application_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'monop_or_raise) in
    Obj.repr(
# 80 "student.mly"
                               (AppExp(_1, _2))
# 854 "student.ml"
               : 'application_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'monop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_operator_exp) in
    Obj.repr(
# 83 "student.mly"
                               (MonOpAppExp (_1, RaiseExp (_3)))
# 862 "student.ml"
               : 'monop_or_raise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'no_operator_exp) in
    Obj.repr(
# 84 "student.mly"
                         ( RaiseExp (_2) )
# 869 "student.ml"
               : 'monop_or_raise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 87 "student.mly"
                      (_1)
# 876 "student.ml"
               : 'application_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'no_application_exp) in
    Obj.repr(
# 88 "student.mly"
                                    (AppExp (_1, _2))
# 884 "student.ml"
               : 'application_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 91 "student.mly"
                     ( _1 )
# 891 "student.ml"
               : 'no_application_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'try_let_if_fun_monop_exp) in
    Obj.repr(
# 92 "student.mly"
                            ( _1 )
# 898 "student.ml"
               : 'no_application_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression_m_more) in
    Obj.repr(
# 95 "student.mly"
                                          (match _4 with (intop, expi, lst) -> TryWithExp (_2, intop, expi, lst) )
# 906 "student.ml"
               : 'try_let_if_fun_monop_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 96 "student.mly"
                                              (LetInExp (_2, _4, _6))
# 915 "student.ml"
               : 'try_let_if_fun_monop_exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 97 "student.mly"
                                                        (LetRecInExp (_3, _4, _6, _8))
# 925 "student.ml"
               : 'try_let_if_fun_monop_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 98 "student.mly"
                                                  ( IfExp(_2, _4, _6))
# 934 "student.ml"
               : 'try_let_if_fun_monop_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 99 "student.mly"
                               ( FunExp( _2, _4))
# 942 "student.ml"
               : 'try_let_if_fun_monop_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'monop) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'try_let_if_fun_monop_exp) in
    Obj.repr(
# 100 "student.mly"
                                   ( MonOpAppExp (_1, _2))
# 950 "student.ml"
               : 'try_let_if_fun_monop_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression_match) in
    Obj.repr(
# 103 "student.mly"
                   ((match _1 with (intop, expi) -> (intop, expi, [])))
# 957 "student.ml"
               : 'expression_m_more))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression_match_no_try_with) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression_m_more) in
    Obj.repr(
# 104 "student.mly"
                                                      ((match (_1, _3) with (intop1, expi1), (intop2, expi2, lst2) -> (intop1, expi1, ((intop2, expi2) :: lst2 ))))
# 965 "student.ml"
               : 'expression_m_more))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 107 "student.mly"
                        ( (_1,_3))
# 973 "student.ml"
               : 'expression_match))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_exp) in
    Obj.repr(
# 110 "student.mly"
                        ((_1, _3))
# 981 "student.ml"
               : 'expression_match_no_try_with))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_operator_exp) in
    Obj.repr(
# 113 "student.mly"
                       (_1)
# 988 "student.ml"
               : 'no_try_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_or_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_and_exp) in
    Obj.repr(
# 116 "student.mly"
                                        (IfExp ( _1, ConstExp (BoolConst true), _3))
# 996 "student.ml"
               : 'no_try_operator_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_and_exp) in
    Obj.repr(
# 117 "student.mly"
                  (_1)
# 1003 "student.ml"
               : 'no_try_operator_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_and_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_comparing_exp) in
    Obj.repr(
# 120 "student.mly"
                                                (IfExp ( _1, _3, ConstExp (BoolConst false)))
# 1011 "student.ml"
               : 'no_try_and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_comparing_exp) in
    Obj.repr(
# 121 "student.mly"
                        (_1)
# 1018 "student.ml"
               : 'no_try_and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_or_upper_exp) in
    Obj.repr(
# 124 "student.mly"
                                                   ( BinOpAppExp(GreaterOp, _3, _1) )
# 1026 "student.ml"
               : 'no_try_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_or_upper_exp) in
    Obj.repr(
# 125 "student.mly"
                                                   ( BinOpAppExp(GreaterOp, _1, _3) )
# 1034 "student.ml"
               : 'no_try_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_or_upper_exp) in
    Obj.repr(
# 126 "student.mly"
                                                    ( IfExp( BinOpAppExp(GreaterOp, _3, _1), ConstExp (BoolConst true), BinOpAppExp(EqOp, _1, _3)) )
# 1042 "student.ml"
               : 'no_try_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_or_upper_exp) in
    Obj.repr(
# 127 "student.mly"
                                                    ( IfExp( BinOpAppExp(GreaterOp, _1, _3), ConstExp (BoolConst true), BinOpAppExp(EqOp, _1, _3)) )
# 1050 "student.ml"
               : 'no_try_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_or_upper_exp) in
    Obj.repr(
# 128 "student.mly"
                                                       ( BinOpAppExp(EqOp, _1, _3) )
# 1058 "student.ml"
               : 'no_try_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_or_upper_exp) in
    Obj.repr(
# 129 "student.mly"
                                                    ( IfExp( BinOpAppExp(EqOp, _1, _3), ConstExp (BoolConst false),ConstExp (BoolConst false)) )
# 1066 "student.ml"
               : 'no_try_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_or_upper_exp) in
    Obj.repr(
# 130 "student.mly"
                             (_1)
# 1073 "student.ml"
               : 'no_try_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'same_level_adds_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_cons_or_upper_exp) in
    Obj.repr(
# 133 "student.mly"
                                                        ( BinOpAppExp(ConsOp, _1, _3))
# 1081 "student.ml"
               : 'no_try_cons_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_adds_or_upper_exp) in
    Obj.repr(
# 134 "student.mly"
                             (_1)
# 1088 "student.ml"
               : 'no_try_cons_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'same_level_adds_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'plus_minus_dplus_dminus_concat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_mults_or_upper_exp) in
    Obj.repr(
# 137 "student.mly"
                                                                                 (BinOpAppExp(_2, _1, _3))
# 1097 "student.ml"
               : 'no_try_adds_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_mults_or_upper_exp) in
    Obj.repr(
# 138 "student.mly"
                              (_1)
# 1104 "student.ml"
               : 'no_try_adds_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'same_level_mults_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'times_div_dtimes_ddiv_mod) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_expo_or_upper_exp) in
    Obj.repr(
# 141 "student.mly"
                                                                           (BinOpAppExp(_2, _1, _3))
# 1113 "student.ml"
               : 'no_try_mults_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_expo_or_upper_exp) in
    Obj.repr(
# 142 "student.mly"
                            (_1)
# 1120 "student.ml"
               : 'no_try_mults_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_application_raise_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_expo_or_upper_exp) in
    Obj.repr(
# 145 "student.mly"
                                                           ( BinOpAppExp (ExpoOp, _1,_3))
# 1128 "student.ml"
               : 'no_try_expo_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_no_operator_exp) in
    Obj.repr(
# 146 "student.mly"
                          (_1)
# 1135 "student.ml"
               : 'no_try_expo_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_let_if_fun_monop_exp) in
    Obj.repr(
# 149 "student.mly"
                               (_1)
# 1142 "student.ml"
               : 'no_try_no_operator_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_app_raise_exp) in
    Obj.repr(
# 150 "student.mly"
                        (_1)
# 1149 "student.ml"
               : 'no_try_no_operator_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_app_expression) in
    Obj.repr(
# 153 "student.mly"
                         (_1)
# 1156 "student.ml"
               : 'no_try_app_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_monop_or_raise) in
    Obj.repr(
# 154 "student.mly"
                         (_1)
# 1163 "student.ml"
               : 'no_try_app_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_monop_or_raise) in
    Obj.repr(
# 155 "student.mly"
                                      (_1)
# 1171 "student.ml"
               : 'no_try_app_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'monop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_app_raise_exp) in
    Obj.repr(
# 158 "student.mly"
                                     (MonOpAppExp (_1, RaiseExp (_3)))
# 1179 "student.ml"
               : 'no_try_monop_or_raise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_app_raise_exp) in
    Obj.repr(
# 159 "student.mly"
                               ( RaiseExp (_2) )
# 1186 "student.ml"
               : 'no_try_monop_or_raise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 162 "student.mly"
                      (_1)
# 1193 "student.ml"
               : 'no_try_app_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_no_app_exp) in
    Obj.repr(
# 163 "student.mly"
                                   (AppExp(_1, _2))
# 1201 "student.ml"
               : 'no_try_app_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 166 "student.mly"
                      (_1)
# 1208 "student.ml"
               : 'no_try_no_app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_let_if_fun_monop_exp) in
    Obj.repr(
# 167 "student.mly"
                                (_1)
# 1215 "student.ml"
               : 'no_try_no_app_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_exp) in
    Obj.repr(
# 170 "student.mly"
                                                  ( IfExp(_2, _4, _6))
# 1224 "student.ml"
               : 'no_try_let_if_fun_monop_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_exp) in
    Obj.repr(
# 171 "student.mly"
                                              (LetInExp (_2, _4, _6))
# 1233 "student.ml"
               : 'no_try_let_if_fun_monop_exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_exp) in
    Obj.repr(
# 172 "student.mly"
                                                        (LetRecInExp (_3, _4, _6, _8))
# 1243 "student.ml"
               : 'no_try_let_if_fun_monop_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_exp) in
    Obj.repr(
# 173 "student.mly"
                               ( FunExp( _2, _4))
# 1251 "student.ml"
               : 'no_try_let_if_fun_monop_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'monop) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'no_try_let_if_fun_monop_exp) in
    Obj.repr(
# 174 "student.mly"
                                      ( MonOpAppExp (_1, _2))
# 1259 "student.ml"
               : 'no_try_let_if_fun_monop_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_or_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_and_exp) in
    Obj.repr(
# 177 "student.mly"
                                      (IfExp (_1, ConstExp ( BoolConst true), _3))
# 1267 "student.ml"
               : 'only_or_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_and_exp) in
    Obj.repr(
# 178 "student.mly"
                 (_1)
# 1274 "student.ml"
               : 'only_or_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_and_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_comparing_exp) in
    Obj.repr(
# 181 "student.mly"
                                               (IfExp (_1, _3, ConstExp (BoolConst false)))
# 1282 "student.ml"
               : 'only_and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_comparing_exp) in
    Obj.repr(
# 182 "student.mly"
                       ( _1 )
# 1289 "student.ml"
               : 'only_and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_cons_or_upper_exp) in
    Obj.repr(
# 185 "student.mly"
                                                 ( BinOpAppExp(GreaterOp, _3, _1) )
# 1297 "student.ml"
               : 'only_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_cons_or_upper_exp) in
    Obj.repr(
# 186 "student.mly"
                                                 ( BinOpAppExp(GreaterOp, _1, _3) )
# 1305 "student.ml"
               : 'only_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_cons_or_upper_exp) in
    Obj.repr(
# 187 "student.mly"
                                                  ( IfExp( BinOpAppExp(GreaterOp, _3, _1), ConstExp (BoolConst true), BinOpAppExp(EqOp, _1, _3)) )
# 1313 "student.ml"
               : 'only_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_cons_or_upper_exp) in
    Obj.repr(
# 188 "student.mly"
                                                  ( IfExp( BinOpAppExp(GreaterOp, _1, _3), ConstExp (BoolConst true), BinOpAppExp(EqOp, _1, _3)) )
# 1321 "student.ml"
               : 'only_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_cons_or_upper_exp) in
    Obj.repr(
# 189 "student.mly"
                                                     ( BinOpAppExp(EqOp, _1, _3) )
# 1329 "student.ml"
               : 'only_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_comparing_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_cons_or_upper_exp) in
    Obj.repr(
# 190 "student.mly"
                                                  ( IfExp( BinOpAppExp(EqOp, _1, _3), ConstExp (BoolConst false),ConstExp (BoolConst false)) )
# 1337 "student.ml"
               : 'only_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_cons_or_upper_exp) in
    Obj.repr(
# 191 "student.mly"
                           (_1)
# 1344 "student.ml"
               : 'only_comparing_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'same_level_adds_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_cons_or_upper_exp) in
    Obj.repr(
# 194 "student.mly"
                                                      ( BinOpAppExp(ConsOp, _1, _3))
# 1352 "student.ml"
               : 'only_cons_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'same_level_adds_exp) in
    Obj.repr(
# 195 "student.mly"
                        (_1)
# 1359 "student.ml"
               : 'only_cons_or_upper_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'same_level_adds_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'plus_minus_dplus_dminus_concat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'same_level_mults_exp) in
    Obj.repr(
# 198 "student.mly"
                                                                           ((BinOpAppExp (_2, _1, _3)))
# 1368 "student.ml"
               : 'same_level_adds_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'same_level_mults_exp) in
    Obj.repr(
# 199 "student.mly"
                        (_1)
# 1375 "student.ml"
               : 'same_level_adds_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'same_level_mults_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'times_div_dtimes_ddiv_mod) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'same_level_expo_exp) in
    Obj.repr(
# 202 "student.mly"
                                                                      ((BinOpAppExp (_2, _1, _3)))
# 1384 "student.ml"
               : 'same_level_mults_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'same_level_expo_exp) in
    Obj.repr(
# 203 "student.mly"
                       (_1)
# 1391 "student.ml"
               : 'same_level_mults_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'only_application_raise_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'same_level_expo_exp) in
    Obj.repr(
# 206 "student.mly"
                                                      (BinOpAppExp(ExpoOp, _1, _3))
# 1399 "student.ml"
               : 'same_level_expo_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_application_raise_exp) in
    Obj.repr(
# 207 "student.mly"
                              (_1)
# 1406 "student.ml"
               : 'same_level_expo_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_app_exp) in
    Obj.repr(
# 210 "student.mly"
                (_1)
# 1413 "student.ml"
               : 'only_application_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'only_monop_or_raise) in
    Obj.repr(
# 211 "student.mly"
                       (_1)
# 1420 "student.ml"
               : 'only_application_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_monop_or_raise) in
    Obj.repr(
# 212 "student.mly"
                                    (AppExp(_1, _2))
# 1428 "student.ml"
               : 'only_application_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'monop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'only_application_raise_exp) in
    Obj.repr(
# 215 "student.mly"
                                          (MonOpAppExp (_1, RaiseExp (_3)))
# 1436 "student.ml"
               : 'only_monop_or_raise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'only_application_raise_exp) in
    Obj.repr(
# 216 "student.mly"
                                    ( RaiseExp (_2) )
# 1443 "student.ml"
               : 'only_monop_or_raise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 219 "student.mly"
                     (_1)
# 1450 "student.ml"
               : 'only_app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'only_app_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 220 "student.mly"
                                  (AppExp(_1, _2))
# 1458 "student.ml"
               : 'only_app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression_base) in
    Obj.repr(
# 224 "student.mly"
                         ( _1 )
# 1465 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 225 "student.mly"
                           ( _2 )
# 1472 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 226 "student.mly"
                                            ( BinOpAppExp (CommaOp, _2, _4))
# 1480 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_expressions) in
    Obj.repr(
# 227 "student.mly"
                                ( _2 )
# 1487 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'monop) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_expression) in
    Obj.repr(
# 228 "student.mly"
                           ( MonOpAppExp (_1,_2) )
# 1495 "student.ml"
               : 'atomic_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 231 "student.mly"
             ( BinOpAppExp(ConsOp, _1, ConstExp(NilConst)) )
# 1502 "student.ml"
               : 'list_expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_expressions) in
    Obj.repr(
# 232 "student.mly"
                                   ( BinOpAppExp(ConsOp, _1, _3) )
# 1510 "student.ml"
               : 'list_expressions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 236 "student.mly"
          ( VarExp ( _1) )
# 1517 "student.ml"
               : 'atomic_expression_base))
; (fun __caml_parser_env ->
    Obj.repr(
# 237 "student.mly"
         (ConstExp (BoolConst true))
# 1523 "student.ml"
               : 'atomic_expression_base))
; (fun __caml_parser_env ->
    Obj.repr(
# 238 "student.mly"
          (ConstExp (BoolConst false))
# 1529 "student.ml"
               : 'atomic_expression_base))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 239 "student.mly"
        ( ConstExp (IntConst ( _1)) )
# 1536 "student.ml"
               : 'atomic_expression_base))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 240 "student.mly"
          ( ConstExp (FloatConst ( _1)) )
# 1543 "student.ml"
               : 'atomic_expression_base))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 241 "student.mly"
           ( ConstExp (StringConst ( _1)) )
# 1550 "student.ml"
               : 'atomic_expression_base))
; (fun __caml_parser_env ->
    Obj.repr(
# 242 "student.mly"
         ( ConstExp UnitConst )
# 1556 "student.ml"
               : 'atomic_expression_base))
; (fun __caml_parser_env ->
    Obj.repr(
# 243 "student.mly"
        ( ConstExp NilConst )
# 1562 "student.ml"
               : 'atomic_expression_base))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "student.mly"
               ( None )
# 1568 "student.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 247 "student.mly"
         ( Some _1 )
# 1575 "student.ml"
               : 'pat))
; (fun __caml_parser_env ->
    Obj.repr(
# 251 "student.mly"
      ( FstOp )
# 1581 "student.ml"
               : 'monop))
; (fun __caml_parser_env ->
    Obj.repr(
# 252 "student.mly"
      ( SndOp )
# 1587 "student.ml"
               : 'monop))
; (fun __caml_parser_env ->
    Obj.repr(
# 253 "student.mly"
       ( HdOp )
# 1593 "student.ml"
               : 'monop))
; (fun __caml_parser_env ->
    Obj.repr(
# 254 "student.mly"
       ( TlOp)
# 1599 "student.ml"
               : 'monop))
; (fun __caml_parser_env ->
    Obj.repr(
# 255 "student.mly"
        ( PrintOp)
# 1605 "student.ml"
               : 'monop))
; (fun __caml_parser_env ->
    Obj.repr(
# 256 "student.mly"
      ( IntNegOp )
# 1611 "student.ml"
               : 'monop))
; (fun __caml_parser_env ->
    Obj.repr(
# 260 "student.mly"
       ( IntPlusOp )
# 1617 "student.ml"
               : 'plus_minus_dplus_dminus_concat))
; (fun __caml_parser_env ->
    Obj.repr(
# 261 "student.mly"
        ( IntMinusOp )
# 1623 "student.ml"
               : 'plus_minus_dplus_dminus_concat))
; (fun __caml_parser_env ->
    Obj.repr(
# 262 "student.mly"
        ( FloatPlusOp )
# 1629 "student.ml"
               : 'plus_minus_dplus_dminus_concat))
; (fun __caml_parser_env ->
    Obj.repr(
# 263 "student.mly"
         ( FloatMinusOp )
# 1635 "student.ml"
               : 'plus_minus_dplus_dminus_concat))
; (fun __caml_parser_env ->
    Obj.repr(
# 264 "student.mly"
        ( ConcatOp )
# 1641 "student.ml"
               : 'plus_minus_dplus_dminus_concat))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "student.mly"
        ( IntTimesOp )
# 1647 "student.ml"
               : 'times_div_dtimes_ddiv_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 269 "student.mly"
      ( IntDivOp )
# 1653 "student.ml"
               : 'times_div_dtimes_ddiv_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 270 "student.mly"
         ( FloatTimesOp )
# 1659 "student.ml"
               : 'times_div_dtimes_ddiv_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 271 "student.mly"
       ( FloatDivOp )
# 1665 "student.ml"
               : 'times_div_dtimes_ddiv_mod))
; (fun __caml_parser_env ->
    Obj.repr(
# 272 "student.mly"
      ( ModOp )
# 1671 "student.ml"
               : 'times_div_dtimes_ddiv_mod))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Common.dec)
